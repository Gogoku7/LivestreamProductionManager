@{
    ViewBag.Title = "Fighting Games";
}

<div class="row">
    <!--WebSocket Client monitor-->
    <div class="half-horizontal-width" style="float: left">
        <div class="panel panel-info">
            <div class="panel-heading text-center">
                <div class="pull-left">
                    <button class="btn btn-danger panelButton" id="clearWebSocketClientMonitorButton"><span class="glyphicon glyphicon-remove" style="font-size: 12px;"></span> Clear</button>
                </div>

                <text class="panel-title">WebSocket clients monitor</text>

                <div class="pull-right">
                    <button class="btn btn-success panelButton toggleMonitorButton" id="toggleWebSocketClientMonitorButton" data-monitor-id="#webSocketClientMonitorTableBody"><span class="glyphicon glyphicon-ok" style="font-size: 12px;"></span> Enabled</button>
                </div>
            </div>
            <div class="panel-body monitorPanelBody" style="overflow-y:scroll;">
                <table class="table table-bordered" id="webSocketClientMonitorTable">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>Path</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody id="webSocketClientMonitorTableBody" data-enabled="True" data-client-monitor="True"></tbody>
                </table>
            </div>
        </div>
    </div>

    <!--Error monitor-->
    <div class="half-horizontal-width" style="float: left">
        <div class="panel panel-info">
            <div class="panel-heading text-center">
                <div class="pull-left">
                    <button class="btn btn-danger panelButton" id="clearErrorMonitorButton"><span class="glyphicon glyphicon-remove" style="font-size: 12px;"></span> Clear</button>
                </div>

                <text class="panel-title">Error monitor</text>

                <div class="pull-right">
                    <button class="btn btn-success panelButton toggleMonitorButton" id="toggleErrorMonitorButton" data-monitor-id="#errorMonitor"><span class="glyphicon glyphicon-ok" style="font-size: 12px;"></span> Enabled</button>
                </div>
            </div>
            <div class="panel-body monitorPanelBody">
                <pre class="monitorPre" id="errorMonitor" data-enabled="True"></pre>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <!--Manage Tournament-->
    <div class="full-horizontal-width">
        <div class="panel panel-warning">
            <div class="panel-heading text-center">
                <text class="panel-title">Manage tournament</text>
            </div>
            <div class="panel-body" id="manageTournament">
                <div class="row" id="manageTournamentValues">
                    <div class="col-md-3 form-group">
                        <label>Tournament</label>
                        <input type="text" class="form-control" id="tournament" />
                    </div>
                    <div class="col-md-3 form-group">
                        <label>Round</label>
                        <input type="text" class="form-control" id="round" />
                    </div>
                    <div class="col-md-3 form-group">
                        <label>Best of</label>
                        <input type="text" class="form-control" id="bestOf" />
                    </div>
                    <div class="col-md-3 form-group">
                        <label>Extra</label>
                        <input type="text" class="form-control" id="extra" />
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-3 form-group">
                        <label>Series</label>
                        <select class="form-control" id="Series"></select>
                    </div>

                    <div class="col-md-3 form-group">
                        <label>Game</label>
                        <select class="form-control" id="Game"></select>
                    </div>

                    <div class="col-md-3 form-group">
                        <label>Format</label>
                        <select class="form-control" id="Format"></select>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <!--Manage Competitors-->
    <div class="full-horizontal-width">
        <div class="panel panel-primary">
            <div class="panel-heading text-center">
                <div class="pull-left">
                    <button class="btn btn-success panelButton submitButton" id="submitCompetitorsButton" data-form-id="#manageCompetitorsForm"><span class="glyphicon glyphicon-arrow-up" style="font-size: 11px;"></span> Update</button>
                </div>

                <text class="panel-title">Manage competitors</text>

                <div class="pull-right">
                    <button class="btn btn-danger panelButton" id="showReadMeModalButton" data-form-id="#manageCompetitorsForm"><span class="glyphicon glyphicon-question-sign" style="font-size: 11px;"></span> Info</button>
                    <button class="btn btn-default panelButton" id="setToDefaultValuesButton"><span class="glyphicon glyphicon-erase" style="font-size: 11px;"></span> Defaults</button>
                    <button class="btn btn-warning panelButton" id="getLatestCompetitorsValuesButton"><span class="glyphicon glyphicon-download-alt" style="font-size: 11px;"></span> Get latest</button>
                    <button class="btn btn-info panelButton" id="switchCompetitorsButton"><span class="glyphicon glyphicon-refresh" style="font-size: 11px;"></span> Switch</button>
                </div>
            </div>
            <div class="panel-body" id="manageCompetitors">
            </div>
            <div class="panel-footer">
                <text>Overlay path: </text><text id="competitorsOverlayPath"></text>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <!--Competitors WebSocket Data monitor-->
    <div class="one-third-horizontal-width" style="float: left">
        <div class="panel panel-primary">
            <div class="panel-heading text-center">
                <div class="pull-left">
                    <button class="btn btn-danger panelButton clearWebSocketDataMonitorButton" id="clearCompetitorsWebSocketDataMonitorButton" data-monitor-id="#competitorsWebSocketDataMonitor"><span class="glyphicon glyphicon-remove" style="font-size: 12px;"></span> Clear</button>
                </div>

                <text class="panel-title">Competitors data monitor</text>

                <div class="pull-right">
                    <button class="btn btn-success panelButton toggleMonitorButton toggleWebSocketDataMonitorButton" id="toggleCompetitorsWebSocketDataMonitorButton" data-monitor-id="#competitorsWebSocketDataMonitor"><span class="glyphicon glyphicon-ok" style="font-size: 12px;"></span> Enabled</button>
                </div>
            </div>
            <div class="panel-body monitorPanelBody">
                <pre class="monitorPre">
                    <code class="monitorCode json" id="competitorsWebSocketDataMonitor" data-enabled="True">
                        
                    </code>
                </pre>
            </div>
        </div>
    </div>

    <!--Competitors CSS monitor-->
    <div class="one-third-horizontal-width" style="float: left">
        <div class="panel panel-primary">
            <div class="panel-heading text-center">
                <div class="pull-left">
                    <button class="btn btn-danger panelButton clearCssMonitorButton" id="clearCompetitorsCssMonitorButton" data-monitor-id="#competitorsCssMonitor"><span class="glyphicon glyphicon-remove" style="font-size: 12px;"></span> Clear</button>
                </div>

                <text class="panel-title">Competitors CSS monitor</text>

                <div class="pull-right">
                    <button class="btn btn-success panelButton toggleMonitorButton toggleCssMonitorButton" id="toggleCompetitorsCssMonitorButton" data-monitor-id="#competitorsCssMonitor"><span class="glyphicon glyphicon-ok" style="font-size: 12px;"></span> Enabled</button>
                </div>
            </div>
            <div class="panel-body monitorPanelBody">
                <pre class="monitorPre">
                    <code class="monitorCode css" id="competitorsCssMonitor" data-enabled="True">

                    </code>
                </pre>
            </div>
        </div>
    </div>

    <!--Competitors JSON monitor-->
    <div class="one-third-horizontal-width" style="float: left">
        <div class="panel panel-primary">
            <div class="panel-heading text-center">
                <div class="pull-left">
                    <button class="btn btn-danger panelButton clearJsonMonitorButton" id="clearCompetitorsJsonMonitorButton" data-monitor-id="#competitorsJsonMonitor"><span class="glyphicon glyphicon-remove" style="font-size: 12px;"></span> Clear</button>
                </div>

                <text class="panel-title">Competitors JSON monitor</text>

                <div class="pull-right">
                    <button class="btn btn-success panelButton toggleMonitorButton toggleJsonMonitorButton" id="toggleCompetitorsJsonMonitorButton" data-monitor-id="#competitorsJsonMonitor"><span class="glyphicon glyphicon-ok" style="font-size: 12px;"></span> Enabled</button>
                </div>
            </div>
            <div class="panel-body monitorPanelBody">
                <pre class="monitorPre">
                    <code class="monitorCode json" id="competitorsJsonMonitor" data-enabled="True">

                    </code>
                </pre>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <!--Preview Competitors overlay-->
    <div class="full-horizontal-width">
        <div class="panel panel-primary">
            <div class="panel-heading text-center">
                <div class="pull-left">
                    <button class="btn btn-danger panelButton forceResizeButton" id="forceCompetitorsResizeButton"><span class="glyphicon glyphicon-resize-full" style="font-size: 11px;"></span> Force resize</button>
                </div>

                <text class="panel-title">Preview Competitors overlay</text>

                <div class="pull-right">
                    <button class="btn btn-success panelButton togglePreviewOverlayButton" id="toggleCompetitorsPreviewOverlayButton" data-preview-id="#competitorsPreviewOverlayIframe" data-panel-id="#competitorsPreviewOverlay" data-overlay-type="Game"><span class="glyphicon glyphicon-ok" style="font-size: 12px;"></span> Enabled</button>
                </div>
            </div>
            <div class="panel-body previewEnabled previewOverlayPanelBody" id="competitorsPreviewOverlay">
                <iframe class="previewOverlayIframe" id="competitorsPreviewOverlayIframe" data-enabled="True"></iframe>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <!--Manage Commentators-->
    <div class="full-horizontal-width">
        <div class="panel panel-success">
            <div class="panel-heading text-center">
                <div class="pull-left">
                    <button class="btn btn-primary panelButton submitButton" id="submitCommentatorsButton" data-form-id="#manageCommentatorsForm"><span class="glyphicon glyphicon-arrow-up" style="font-size: 11px;"></span> Update</button>
                </div>

                <text class="panel-title">Manage commentators</text>

                <div class="pull-right">
                    <button class="btn btn-info panelButton" id="addCommentatorButton"><span style="font-weight: bold;" class="glypicon glyphicon-plus"></span> Add</button>
                </div>
            </div>
            <div class="panel-body" id="manageCommentators">
                <form action="/Commentators/UpdateCommentators"
                      method="post"
                      id="manageCommentatorsForm"
                      data-overlay-type="Commentary"
                      data-websocket-data-monitor-id="#commentatorsWebSocketDataMonitor"
                      data-css-monitor-url="/Commentators/GetCssFileContent"
                      data-css-monitor-id="#commentatorsCssMonitor"
                      data-json-monitor-url="/Commentators/GetJsonFileContent"
                      data-json-monitor-id="#commentatorsJsonMonitor"
                      data-overlay-preview-id="commentatorsPreviewOverlayIframe"
                      data-snackbar-id="#manageCommentatorsSnackbar">

                    <input type="hidden" name="PathToGame" />
                    <div class="row">
                        <div class="col-md-5">
                            <label>Name</label>
                        </div>
                        <div class="col-md-5">
                            <label>Twitter</label>
                        </div>
                        <div class="col-md-2">
                            <label>Actions</label>
                        </div>
                    </div>
                </form>
            </div>
            <div class="panel-footer">
                <text>Overlay path: </text><text id="commentatorsOverlayPath"></text>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <!--Commentators WebSocket Data monitor-->
    <div class="one-third-horizontal-width" style="float: left">
        <div class="panel panel-success">
            <div class="panel-heading text-center">
                <div class="pull-left">
                    <button class="btn btn-danger panelButton clearWebSocketDataMonitorButton" id="clearCommentatorsWebSocketDataMonitorButton" data-monitor-id="#commentatorsWebSocketDataMonitor"><span class="glyphicon glyphicon-remove" style="font-size: 12px;"></span> Clear</button>
                </div>

                <text class="panel-title">Commentators data monitor</text>

                <div class="pull-right">
                    <button class="btn btn-success panelButton toggleMonitorButton toggleWebSocketDataMonitorButton" id="toggleCommentatorsWebSocketDataMonitorButton" data-monitor-id="#commentatorsWebSocketDataMonitor"><span class="glyphicon glyphicon-ok" style="font-size: 12px;"></span> Enabled</button>
                </div>
            </div>
            <div class="panel-body monitorPanelBody">
                <pre class="monitorPre">
                    <code class="monitorCode json" id="commentatorsWebSocketDataMonitor" data-enabled="True">
                        
                    </code>
                </pre>
            </div>
        </div>
    </div>

    <!--Commentators CSS monitor-->
    <div class="one-third-horizontal-width" style="float: left">
        <div class="panel panel-success">
            <div class="panel-heading text-center">
                <div class="pull-left">
                    <button class="btn btn-danger panelButton clearCssMonitorButton" id="clearCommentatorsCssMonitorButton" data-monitor-id="#commentatorsCssMonitor"><span class="glyphicon glyphicon-remove" style="font-size: 12px;"></span> Clear</button>
                </div>

                <text class="panel-title">Commentators CSS monitor</text>

                <div class="pull-right">
                    <button class="btn btn-success panelButton toggleMonitorButton toggleCssMonitorButton" id="toggleCommentatorsCssMonitorButton" data-monitor-id="#commentatorsCssMonitor"><span class="glyphicon glyphicon-ok" style="font-size: 12px;"></span> Enabled</button>
                </div>
            </div>
            <div class="panel-body monitorPanelBody">
                <pre class="monitorPre">
                    <code class="monitorCode css" id="commentatorsCssMonitor" data-enabled="True">

                    </code>
                </pre>
            </div>
        </div>
    </div>

    <!--Commentators JSON monitor-->
    <div class="one-third-horizontal-width" style="float: left">
        <div class="panel panel-success">
            <div class="panel-heading text-center">
                <div class="pull-left">
                    <button class="btn btn-danger panelButton clearJsonMonitorButton" id="clearCommentatorsJsonMonitorButton" data-monitor-id="#commentatorsJsonMonitor"><span class="glyphicon glyphicon-remove" style="font-size: 12px;"></span> Clear</button>
                </div>

                <text class="panel-title">Commentators JSON monitor</text>

                <div class="pull-right">
                    <button class="btn btn-success panelButton toggleMonitorButton toggleJsonMonitorButton" id="toggleCommentatorsJsonMonitorButton" data-monitor-id="#commentatorsJsonMonitor"><span class="glyphicon glyphicon-ok" style="font-size: 12px;"></span> Enabled</button>
                </div>
            </div>
            <div class="panel-body monitorPanelBody">
                <pre class="monitorPre">
                    <code class="monitorCode json" id="commentatorsJsonMonitor" data-enabled="True">

                    </code>
                </pre>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <!--Preview Commentators overlay-->
    <div class="full-horizontal-width">
        <div class="panel panel-success">
            <div class="panel-heading text-center">
                <div class="pull-left">
                    <button class="btn btn-danger panelButton forceResizeButton" id="forceCommentatorsResizeButton"><span class="glyphicon glyphicon-resize-full" style="font-size: 11px;"></span> Force resize</button> <!--Solve not working bug-->
                </div>

                <text class="panel-title">Preview Commentators overlay</text>

                <div class="pull-right">
                    <button class="btn btn-success panelButton togglePreviewOverlayButton" id="toggleCommentatorsPreviewOverlayButton" data-preview-id="#commentatorsPreviewOverlayIframe" data-panel-id="#commentatorsPreviewOverlay" data-overlay-type="Commentary"><span class="glyphicon glyphicon-ok" style="font-size: 12px;"></span> Enabled</button>
                </div>
            </div>
            <div class="panel-body previewEnabled previewOverlayPanelBody" id="commentatorsPreviewOverlay">
                <iframe class="previewOverlayIframe" id="commentatorsPreviewOverlayIframe" data-enabled="True"></iframe>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script type="text/javascript">
        /* Global variables */
        var baseUrl = "@System.Configuration.ConfigurationManager.AppSettings["BaseUrl"]";
        var competitorsFormJsonData = null;
        var commentatorsFormJsonData = null;
        var crewBattlePlayerCount = 0;
        var clientsConnectedCount = 0;
        var competitorsOverlayPreviewSourceUrl = null;
        var commentatorsOverlayPreviewSourceUrl = null;

        // Summary:
        // On: ready
        // Initialize WebSocket.
        // Get series.
        $(document).ready(function () {
            hljs.initHighlightingOnLoad();
            InitializeWebSocket();
            GetSeries();
        });



        /* WebSocket */

        // Summary:
        // Initialize the WebSocket and events.
        function InitializeWebSocket() {
            var uri = "ws://" + baseUrl + "/WebSocket/Queu";

            websocket = new WebSocket(uri);

            // Summary:
            // On: Opening the WebSocket connection.
            // Update the client WebSocket monitor, add one to the clients connected count.
            // Show a snackbar message.
            websocket.onopen = function () {
                $("#webSocketClientMonitorTableBody").append("<tr><td>1</td><td>Livestream Production Manager</td><td>Connected</td></tr>");
                clientsConnectedCount++;
                showSnackbar("#managerConnectedSnackbar", "Connected to WebSocket.");
            };

            // Summary:
            // On: Error occurring with the WebSocket connection.
            // Show a Snackbar message and update the error log monitor.
            // Update the error monitor.
            websocket.onerror = function (event) {
                showSnackbar("#managerFailedToConnectSnackbar", "Something went wrong with the WebSocket connection.");
                UpdateErrorMonitor(event);
            };

            // Summary:
            // On: Receiving a message from the WebSocket.
            // If > The message type is "queu"
            //  
            //  Show a snackbar message.
            // Else if > The message type is "overlayConnected"
            //  
            //  Show a snackbar message.
            // Else if > The message type is "overlayDisconnected"
            //  
            //  Show a snackbar message.
            // Else if > The message type is "forceResize"
            //  Show a snackbar message.
            // PARAMETERS
            // event: The message received from the WebSocket.
            // event.data: the data in JSON format received from the WebSocket.
            websocket.onmessage = function (event) {
                var jsonData = JSON.parse(event.data);

                if (jsonData.type == "queu") {
                    UpdateWebSocketDataMonitor(jsonData.data, jsonData.overlayType);
                    showSnackbar("#queuSnackbar", "A queu command has been broadcast.");
                }
                else if (jsonData.type == "overlayConnected") {
                    UpdateWebSocketClientMonitor(jsonData);
                    showSnackbar("#overlayConnectedSnackbar", "An overlay has connected to the WebSocket: " + jsonData.data);
                }
                else if (jsonData.type == "overlayDisconnected") {
                    UpdateWebSocketClientMonitor(jsonData);
                    showSnackbar("#overlayDisconnectedSnackbar", "An overlay has disconnected from the WebSocket: " + jsonData.data);
                }
                else if (jsonData.type == "forceResize") {
                    showSnackbar("#forceResizeSnackbar", "A resize command has been broadcast");
                }
            };
        }



        /* Tournament */

        // Summary:
        // Retrieve the series using AJAX.
        // Add the series to the series dropdown.
        function GetSeries() {
            $.ajax({
                type: "POST",
                url: "/FightingGames/GetSeries",
                dataType: "json",
                success: function (data) {
                    $("#Series").append("<option value='' selected disabled hidden>Choose series</option>");
                    for (var i = 0; i < data.length; i++) {
                        $("#Series").append("<option data-series='" + data[i].SERIES + "' value='" + data[i].PathToSeries + "'>" + data[i].SeriesName + "</option>");
                    }
                },
                error: function (ex) {
                    UpdateErrorMonitor(ex);
                    console.log(ex);
                }
            });
        }

        // Summary:
        // On: Selecting a series from the series dropdown.
        // Retrieve the games using AJAX.
        // Empty the games and formats dropdown.
        // Add the games to the games dropdown.
        $("#Series").change(function () {
            var selectedSeries = $("#Series option:selected");
            $.ajax({
                type: "POST",
                url: "/FightingGames/GetGames",
                data: { "pathToSeries": selectedSeries.val() },
                dataType: "json",
                success: function (data) {
                    $("#Game").empty();
                    $("#Format").empty();
                    $("#Game").append("<option value='' selected disabled hidden>Choose game</option>");
                    for (var i = 0; i < data.length; i++) {
                        $("#Game").append("<option data-game='" + data[i].GAME + "' value='" + data[i].PathToGame + "'>" + data[i].GameName + "</option>");
                    }
                },
                error: function (ex) {
                    UpdateErrorMonitor(ex);
                    console.log(ex);
                }
            });
        });

        // Summary:
        // On: Selecting a game from the games dropdown.
        // Retrieve the formats using AJAX.
        // Empty the games and formats dropdown.
        // Add the formats to the formats dropdown.
        $("#Game").change(function () {
            var selectedGame = $("#Game option:selected");
            $.ajax({
                type: "POST",
                url: "/FightingGames/GetFormats?",
                data: { "pathToGame": selectedGame.val() },
                dataType: "json",
                success: function (data) {
                    $("#Format").empty();
                    $("#Format").append("<option value='' selected disabled hidden>Choose format</option>");
                    for (var i = 0; i < data.length; i++) {
                        $("#Format").append("<option data-format='" + data[i].FORMAT + "' url='" + data[i].Url + "' value='" + data[i].PathToFormat + "'>" + data[i].FormatName + "</option>");
                    }
                },
                error: function (ex) {
                    UpdateErrorMonitor(ex);
                    console.log(ex);
                }
            });
        });

        // Summary:
        // On: Selecting a format from the formats dropdown.
        // Retrieve the manage competitors partial view using AJAX.
        // Insert the partial view into the manage competitors panel.
        // Change the preview overlay iframe source to the GameOverlay.html.
        // Set the variable's competitorsFormJsonData and commentatorsFormJsonData to null, so it can be constructed again when a new update is submitted.
        $("#Format").change(function () {
            var selectedSeries = $("#Series option:selected");
            var selectedGame = $("#Game option:selected");
            var selectedFormat = $("#Format option:selected");
            $.ajax({
                type: "POST",
                url: selectedFormat.attr("url"),
                data: {
                    "series": selectedSeries.data("series"),
                    "game": selectedGame.data("game"),
                    "format": selectedFormat.data("format"),
                    "pathToSeries": selectedSeries.val(),
                    "pathToGame": selectedGame.val(),
                    "pathToFormat": selectedFormat.val()
                },
                dataType: "html",
                success: function (data) {
                    $("#manageCompetitors").html(data);
                    $("#competitorsOverlayPath").html(selectedFormat.val() + "GameOverlay.html");
                    $("#commentatorsOverlayPath").html(selectedGame.val() + "Commentators/CommentatorsOverlay.html");
                    $("#manageCommentatorsForm > [name='PathToGame']").val(selectedGame.val());

                    competitorsOverlayPreviewSourceUrl = "http://" + baseUrl + selectedFormat.val().slice(1) + "GameOverlay.html";
                    if ($("#competitorsPreviewOverlayIframe").data("enabled") == "True") {
                        $("#competitorsPreviewOverlayIframe").attr("src", competitorsOverlayPreviewSourceUrl);
                    }

                    commentatorsOverlayPreviewSourceUrl = "http://" + baseUrl + selectedGame.val().slice(1) + "Commentators/CommentaryOverlay.html";
                    if ($("#commentatorsPreviewOverlayIframe").data("enabled") == "True") {
                        $("#commentatorsPreviewOverlayIframe").attr("src", commentatorsOverlayPreviewSourceUrl);
                    }

                    competitorsFormJsonData = null;
                    commentatorsFormJsonData = null;
                },
                error: function (ex) {
                    UpdateErrorMonitor(ex);
                    console.log(ex);
                }
            });
        });

        // Summary:
        // On: Changing values of a tournament information input or competitor information input.
        // Replace the btn-success class on the submit update button by the btn-danger class, resulting in the button becoming red.
        $("body").on("change input", "#manageTournamentValues :input, #manageCompetitorsForm :input", function () {
            if (!$("#submitCompetitorsButton").hasClass("btn-danger")) {
                $("#submitCompetitorsButton").removeClass("btn-success").addClass("btn-danger danger-pulsate");
            }
        });



        /* Competitors */

        // Summary:
        // On: Clicking the switch competitors button.
        // If > The manage competitors form is present.
        //  If > There was inputs found with the data-side attribute.
        //      Switch the values of the competitors around.
        //  Else > There was no inputs found with the data-side attribute.
        //      Show a snackbar message.
        // Else > The manage competitors form is not present.
        //  Show a snackbar message.
        // Note: Supports singles and more complex formats with correct html of the manage competitors partial view.
        $("#switchCompetitorsButton").click(function () {
            if ($("#manageCompetitorsForm").length) {
                var side1Inputs = $("#manageCompetitorsForm").find(":input[data-side='1']");

                if (side1Inputs.length) {
                    side1Inputs.each(function () {
                        if ($(this).attr("type") == "checkbox") {
                            var side2Input = $($(this).data("opposite-id"));
                            var side2InputCheckedValue = side2Input.prop("checked");
                            side2Input.prop("checked", $(this).prop("checked"));
                            $(this).prop("checked", side2InputCheckedValue);
                        }
                        else {
                            var side2Input = $($(this).data("opposite-id"));
                            var side2InputValue = side2Input.val();
                            side2Input.val($(this).val());
                            $(this).val(side2InputValue);
                        }
                    });

                    $("#submitCompetitorsButton").removeClass("btn-success").addClass("btn-danger danger-pulsate");
                } else {
                    showSnackbar("#manageCompetitorsSnackbar", "The Manage Competitors form was found, but no inputs inside have the appropriate data-side='1' attribute.");
                }
            } else {
                showSnackbar("#manageCompetitorsSnackbar", "The Manage Competitors form is not present.");
            }
        });

        //Summary: 
        // On: Clicking the get latest values button
        // If > The manage competitors form is present.
        //  
        // Else > The manage competitors form is not present.
        //  Show a snackbar message.
        $("#getLatestCompetitorsValuesButton").click(function () {
            if ($("#manageCompetitorsForm").length) {
                $.ajax({
                    type: "POST",
                    url: "/FightingGames/GetLatestValues",
                    data: { "pathToFormat": $("input[name='PathToFormat']").val() },
                    dataType: "json",
                    success: function (data) {
                        console.log(data);

                        if (data.Success === true) {
                            $.each(data.Data, function (index) {
                                if ($("[data-selector='" + data.Data[index].Selector + "']").attr("type") == "checkbox") {
                                    $("[data-selector='" + data.Data[index].Selector + "']").prop("checked", JSON.parse(data.Data[index].Value.toLowerCase()));
                                }
                                else {
                                    $("[data-selector='" + data.Data[index].Selector + "']").val(data.Data[index].Value);
                                }
                            });

                            $("#tournament").val($("[name='Tournament']").val());
                            $("#round").val($("[name='Round']").val());
                            $("#bestOf").val($("[name='BestOf']").val());
                            $("#extra").val($("[name='Extra']").val());

                            $("#submitCompetitorsButton").removeClass("btn-success").addClass("btn-danger danger-pulsate");

                            showSnackbar("#manageCompetitorsSnackbar", "Retrieved the latest values.");
                        }
                        else {
                            showSnackbar("#manageCompetitorsSnackbar", data.Message);
                            UpdateErrorMonitor(data.ErrorMessage);
                            console.log(data.ErrorMessage);
                        }
                    },
                    error: function (ex) {
                        console.log("not implemented");
                        UpdateErrorMonitor(ex);
                        console.log(ex);
                    }
                });
            } else {
                showSnackbar("#manageCompetitorsSnackbar", "The Manage Competitors form is not present.");
            }
        });

        //Summary: 
        // On: Clicking the get set to default values button
        // If > The manage competitors form is present.
        //  If > The manage competitor form has inputs with attribute 'data-default'.
        //      Change all inputs to their default values.
        //      Replace the btn-success class on the submit update button by the btn-danger class, resulting in the button becoming red.
        //  Else > The manage competitor form has no inputs with attribute 'data-default'.
        //      Show a snackbar message.
        // Else > The manage competitors form is not present.
        //  Show a snackbar message.
        $("#setToDefaultValuesButton").click(function () {
            if ($("#manageCompetitorsForm").length) {
                if ($("#manageCompetitorsForm").find(":input[data-default]").length) {
                    var inputsWithDefaults = $("#manageCompetitorsForm").find(":input[data-default]");

                    inputsWithDefaults.each(function () {
                        if ($(this).attr("type") == "checkbox") {
                            $(this).prop("checked", false);
                        }
                        else {
                            $(this).val($(this).data("default"));
                        }
                    });

                    if (!$("#submitCompetitorsButton").hasClass("btn-danger")) {
                        $("#submitCompetitorsButton").removeClass("btn-success").addClass("btn-danger danger-pulsate");
                    }
                } else {
                    showSnackbar("#manageCompetitorsSnackbar", "The Manage Competitors form was found, but no inputs inside have the appropriate data-default attribute.");
                }
            } else {
                showSnackbar("#manageCompetitorsSnackbar", "The Manage Competitors form is not present.");
            }
        });

        //Summary:
        //On: Clicking the get crew players button.
        // Limit the crew players count to between 1 and 99.
        // If > The value of the crew players count is invalid.
        //  Show a snackbar message.
        //  Do not submit the competitors form.
        // Else > The value of the crew players count is valid.
        //  Retrieve the crew players partial view using AJAX.
        //  Insert the partial view into the manage crew players container.
        $("body").on("click", "#getCrewPlayersButton", function () {
            if ($("#crewPlayersCount").val() < 1) {
                $("#crewPlayersCount").val("1");
            }
            if ($("#crewPlayersCount").val() > 99) {
                $("#crewPlayersCount").val("99");
            }

            if ($("#crewPlayersCount").val() == null || $("#crewPlayersCount").val() == undefined || $("#crewPlayersCount").val() == "" || crewBattlePlayerCount.toString() == $("#crewPlayersCount").val().toString()) {
                showSnackbar("#manageCompetitorsSnackbar", "The player count value is not valid or unchanged");
                return;
            }
            else {
                $.ajax({
                    type: "POST",
                    url: "/SuperSmashBros/GetCrewPlayers",
                    data: {
                        "Count": $("#crewPlayersCount").val(),
                        "Series": $("#manageCompetitorsForm").find("input[name='Series']").val(),
                        "Game": $("#manageCompetitorsForm").find("input[name='Game']").val(),
                        "Format": $("#manageCompetitorsForm").find("input[name='Format']").val(),
                        "PathToSeries": $("#manageCompetitorsForm").find("input[name='PathToSeries']").val(),
                        "PathToGame": $("#manageCompetitorsForm").find("input[name='PathToGame']").val(),
                        "PathToFormat": $("#manageCompetitorsForm").find("input[name='PathToFormat']").val()
                    },
                    dataType: "html",
                    success: function (data) {
                        $("#crewPlayersContainer").html(data);
                    },
                    error: function (ex) {
                        UpdateErrorMonitor(data.ErrorMessage);
                        console.log(ex);
                    }
                });
            }
        });

        /* Competitors & Commentators */

        // Summary:
        // On: Clicking the submit competitors or commentators button.
        // If > The manage form is present. (only applies to competitors form)
        //  If > A format has been selected in the format dropdown. (only applies to commentators form)
        //      Copy the tournament values to the manage form. (only applies to competitors form)
        //      Submit the competitors form using SubmitCompetitorsForm().
        //  Else > A format has not been selected in the format dropdown. (only applies to commentators form)
        //      Show a snackbar message.
        // Else > The manage form is not present. (only applies to competitors form)
        //  Show a snackbar message.
        $(".submitButton").click(function () {
            if ($($(this).data("form-id")).length) {
                if ($("#Format").val()) {
                    $($(this).data("form-id")).find("input[name='Tournament']").val($("#tournament").val());
                    $($(this).data("form-id")).find("input[name='Round']").val($("#round").val());
                    $($(this).data("form-id")).find("input[name='BestOf']").val($("#bestOf").val());
                    $($(this).data("form-id")).find("input[name='Extra']").val($("#extra").val());

                    SubmitCompetitorsForm($($(this).data("form-id")), $(this));
                } else {
                    showSnackbar("#manageCommentatorsSnackbar", "No game and format have been selected.");
                }
            } else {
                showSnackbar("#manageCompetitorsSnackbar", "The Manage Competitors form is not present.");
            }
        });

        // Summary:
        // Submit the competitors form using AJAX.
        // If > The update was successful.
        //  Show a snackbar message.
        //  Replace the btn-danger class on the submit update button by the btn-success class, resulting in the button becoming green.
        //  If > The overlay type is game.
        //      Build and send a competitors queu update through the WebSocket using BuildAndSendQueuUpdate().
        //      Update the competitors CSS monitor using UpdateCSSMonitor().
        //      Update the competitors JSON monitor using UpdateCSSMonitor().
        //  Else If >The overlay type is commentary.
        //      Build and send a commentators queu update through the WebSocket using BuildAndSendQueuUpdate().
        //      Update the commentators CSS monitor using UpdateCSSMonitor().
        //      Update the commentators JSON monitor using UpdateCSSMonitor().
        // Else > The update was unsuccessful.
        //  Show a snackbar message.
        //  Update the error monitor using UpdateErrorMonitor()
        // PARAMETERS
        // manageForm: The manage form that is going to be submitted.
        // submitButton: The button that was clicked to submit the form.
        function SubmitCompetitorsForm(manageForm, submitButton) {
            $.ajax({
                type: "POST",
                url: manageForm.attr("action"),
                data: manageForm.serialize(),
                dataType: "json",
                success: function (data) {
                    showSnackbar(manageForm.data("snackbar-id"), data.Message);

                    if (data.Success == "True") {
                        if (submitButton.hasClass("btn-danger")) {
                            submitButton.removeClass("btn-danger danger-pulsate").addClass("btn-success");
                        }

                        showSnackbar(manageForm.data("snackbar-id"), data.Message);

                        if (manageForm.is("[data-overlay-type='Game']")) {
                            competitorsFormJsonData = BuildAndSendQueuUpdate(manageForm, competitorsFormJsonData);
                            UpdateCSSMonitor(manageForm.data("css-monitor-url"), { "pathToFormat": manageForm.find("input[name='PathToFormat']").val() }, manageForm.data("css-monitor-id"));
                            UpdateJsonMonitor(manageForm.data("json-monitor-url"), { "pathToFormat": manageForm.find("input[name='PathToFormat']").val() }, manageForm.data("json-monitor-id"));
                        }
                        else if (manageForm.is("[data-overlay-type='Commentary']")) {
                            commentatorsFormJsonData = BuildAndSendQueuUpdate(manageForm, commentatorsFormJsonData);
                            UpdateCSSMonitor(manageForm.data("css-monitor-url"), { "pathToGame": manageForm.find("input[name='PathToGame']").val() }, manageForm.data("css-monitor-id"));
                            UpdateJsonMonitor(manageForm.data("json-monitor-url"), { "pathToGame": manageForm.find("input[name='PathToGame']").val() }, manageForm.data("json-monitor-id"));
                        }
                    }
                    else {
                        showSnackbar(manageForm.data("snackbar-id"), data.Message);
                        UpdateErrorMonitor(data.ErrorMessage);
                        console.log(data.ErrorMessage);
                    }
                },
                error: function (ex) {
                    UpdateErrorMonitor(ex);
                    console.log(ex);
                }
            });
        }

        // Summary:
        //
        //
        // If > formJsonData variable is null, no update has been submitted so far.
        //  
        // Else > formJsonData variable is not null, an update has been submitted before.
        //  
        //  
        // If > jsonData.data has any queu data.
        //  Send the queu through the WebSocket
        // Return the new json data.
        // PARAMETERS
        // manageForm: The manage form that that the queu is going to be build from.
        // formJsonData: The current json data.
        function BuildAndSendQueuUpdate(manageForm, formJsonData) {
            var formInputs = manageForm.find(":input[data-selector]");
            var jsonData = { "type": "queu", "overlayType": manageForm.data("overlay-type"), "data": [] };

            if (formJsonData == null) {
                formJsonData = {};

                $(formInputs).each(function () {
                    if ($(this).is(":checkbox")) {
                        formJsonData[$(this).data("selector")] = $(this).is(":checked");
                    } else {
                        formJsonData[$(this).data("selector")] = $(this).val();
                    }

                    if ($.inArray($(this).data("selector"), jsonData.data) == -1) {
                        jsonData.data.push($(this).data("selector"));
                    }
                });
            }
            else {
                var newFormJsonData = {};
                $(formInputs).each(function () {
                    if ($(this).is(":checkbox")) {
                        newFormJsonData[$(this).data("selector")] = $(this).is(":checked");
                    } else {
                        newFormJsonData[$(this).data("selector")] = $(this).val();
                    }
                });

                $.each(newFormJsonData, function (key, value) {
                    if (!(key in formJsonData)) {
                        jsonData.data.push(key);
                    }
                    if (formJsonData[key] != value) {
                        jsonData.data.push(key);
                    }
                });

                formJsonData = newFormJsonData;
            }

            if (jsonData.data.length > 0) {
                websocket.send(JSON.stringify(jsonData));
            }

            return formJsonData;
        }



        /* Commentators */

        // Summary:
        // On: Clicking the add commentator button.
        // Retrieve the commentator partial view using AJAX.
        // Append the partial view manage commentators form.
        // Re-index all the commentator elements available.
        $("#addCommentatorButton").click(function () {
            $.ajax({
                type: "POST",
                url: "/Commentators/GetCommentatorRow",
                data: { "index": $("div[id*='commentator-row-']").length },
                dataType: "html",
                success: function (data) {
                    $("#manageCommentatorsForm").append(data);

                    reindexCommentators();
                },
                error: function (ex) {
                    UpdateErrorMonitor(ex);
                    console.log(ex);
                }
            });
        });

        // Summary:
        // On: Clicking the remove commentator button.
        // Remove the row of the commentator with the specified id attribute.
        // Re-index all the commentator elements available using reindexCommentators().
        // PARAMETERS
        // index: index of the element to be removed
        function removeCommentator(index) {
            $("#commentator-row-" + index).remove();

            reindexCommentators();
        }

        // Summary:
        // On: Clicking the move commentator down button.
        // If > There is a commentator below the selected one.
        //  Swap the commentators
        // Else > There is no commentator below the selected one.
        //  Show a snackbar message.
        // Re-index all the commentator elements available using reindexCommentators().
        // PARAMETERS
        // index: index of the element to be removed
        function moveCommentatorDown(index) {
            if ($("#commentator-row-" + (index + 1)).length) {
                var row1 = $("#commentator-row-" + index);
                var row2 = $("#commentator-row-" + (index + 1));

                row1.replaceWith(row2.clone());
                row2.replaceWith(row1.clone());
            }
            else {
                showSnackbar("#manageCommentatorsSnackbar", "The selected commentator can't be moved down at this time.");
            }

            reindexCommentators();
        }

        // Summary:
        // On: Clicking the move commentator up button
        // If > There is a commentator above the selected one.
        //  Swap the commentators
        // Else > There is no commentator above the selected one.
        //  Show a snackbar message.
        // Re-index all the commentator elements available using reindexCommentators().
        // PARAMETERS
        // index: index of the element to be removed
        function moveCommentatorUp(index) {
            $("#commentator-row-" + index);
            if (index > 0) {
                if ($("#commentator-row-" + (index - 1)).length) {
                    var row1 = $("#commentator-row-" + index);
                    var row2 = $("#commentator-row-" + (index - 1));

                    row1.replaceWith(row2.clone());
                    row2.replaceWith(row1.clone());
                }
                else {
                    showSnackbar("#manageCommentatorsSnackbar", "The selected commentator can't be moved up at this time.");
                }
            }

            reindexCommentators();
        }

        // Summary:
        // Re-index all the commentator elements available
        function reindexCommentators() {
            $("div[id*='commentator-row-']").each(function (index) {
                $(this).attr("id", "commentator-row-" + index);
                $(this).find("input[id*='_Name']").attr({ "name": "commentatorViewModels[" + index + "].Name", "id": "commentatorViewModels_" + index + "_Name", "data-selector": "#commentator" + (index + 1) + "NameText" }).data("selector", `#commentator${ index + 1 }NameText`);
                $(this).find("input[id*='_Twitter']").attr({ "name": "commentatorViewModels[" + index + "].Twitter", "id": "commentatorViewModels_" + index + "_Twitter", "data-selector": "#commentator" + (index + 1) + "TwitterText" }).data("selector", `#commentator${ index + 1 }TwitterText`);
                $(this).find("button[id^='deleteCommentator-']").attr({ "onclick": "removeCommentator(" + index + ")", "id": "deleteCommentator-" + index });
                $(this).find("button[id^='moveCommentatorDown-']").attr({ "onclick": "moveCommentatorDown(" + index + ")", "id": "moveCommentatorDown-" + index });
                $(this).find("button[id^='moveCommentatorUp-']").attr({ "onclick": "moveCommentatorUp(" + index + ")", "id": "moveCommentatorUp-" + index });
            });

            if (!$("#submitCommentatorsButton").hasClass("btn-danger")) {
                $("#submitCommentatorsButton").removeClass("btn-primary").addClass("btn-danger danger-pulsate");
            }
        }

        // Summary:
        // On: Changing values of a commentator input.
        // Replace the btn-primary class on the submit update button by the btn-danger class, resulting in the button becoming red.
        $("body").on("change input", "#manageCommentatorsForm :input", function () {
            if (!$("#submitCommentatorsButton").hasClass("btn-danger")) {
                $("#submitCommentatorsButton").removeClass("btn-primary").addClass("btn-danger danger-pulsate");
            }
        });



        /* General Monitor  */

        // Summary:
        // If > The json is of type "overlayConnected".
        //  Increase clientsConnectedCount variable by 1.
        //  Add a new row to the WebSocket client monitor table body.
        // Else > The json is of type "overlayDisconnected".
        //  Decrease clientsConnectedCount variable by 1 if it's higher than 1.
        //  Remove the row from the WebSocket client monitor table body with the right data-full-path attribute value.
        // PARAMETERS
        // jsonData: the json data received through the WebSocket
        function UpdateWebSocketClientMonitor(jsonData) {
            if ($("#webSocketClientMonitorTableBody").data("enabled") == "True") {
                var splitPath = jsonData.data.split("/");

                if (jsonData.type == "overlayConnected") {
                    clientsConnectedCount++;
                    $("#webSocketClientMonitorTableBody").append("<tr data-full-path=" + jsonData.data + "><td>" + clientsConnectedCount + "</td><td>" + splitPath[splitPath.length - 3] + "/" + splitPath[splitPath.length - 2] + "/" + splitPath[splitPath.length - 1] + "</td><td>Connected</td></tr>");  // , jsonData.overlayType
                }
                else if (jsonData.type == "overlayDisconnected") {
                    if (clientsConnectedCount > 1) {
                        clientsConnectedCount--;
                    }

                    $("#webSocketClientMonitorTableBody").find("tr[data-full-path='" + jsonData.data + "']").remove();
                }
            }
        }

        // Summary:
        // On: Clicking the clear WebSocket client monitor button
        // Remove all data from the WebSocket client monitor and reset the clientsConnectedCount
        $("#clearWebSocketClientMonitorButton").click(function () {
            if ($("#webSocketClientMonitorTableBody").data("enabled") == "True") {
                $("#webSocketClientMonitorTableBody").html("<tr><td>1</td><td>Livestream Production Manager</td><td>Connected</td></tr>");
                clientsConnectedCount = 1;
            }
        });

        // Summary:
        // Append the error to the error monitor.
        function UpdateErrorMonitor(error) {
            if ($("#errorMonitor").data("enabled") == "True") {
                $("#errorMonitor").prepend(error);
            }
        }

        // Summary:
        // On: Clicking the clear error monitor button
        // Remove all data from the error monitor
        $("#clearErrorMonitorButton").click(function () {
            if ($("#errorMonitor").data("enabled") == "True") {
                $("#errorMonitor").html("");
            }
        });



        /* Game & Commentary Monitor */

        // Summary:
        // Update the WebSocket data monitor with the newest data received from the WebSocket.
        // PARAMETERS
        // data: the data received through the WebSocket
        function UpdateWebSocketDataMonitor(data, overlayType) {
            if ($($("form[data-overlay-type='" + overlayType + "']").data("websocket-data-monitor-id")).data("enabled") == "True") {
                $($("form[data-overlay-type='" + overlayType + "']").data("websocket-data-monitor-id")).html(JSON.stringify(data));
                hljs.initHighlighting();
            }
        }

        // Summary:
        // On: Clicking the clear WebSocket data monitor button
        // Remove all data from the WebSocket data monitor
        $(".clearWebSocketDataMonitorButton").click(function () {
            if ($($(this).data("monitor-id")).data("enabled") == "True") {
                $($(this).data("monitor-id")).html("");
            }
        });

        // Summary:
        // Retrieve the CSS content using AJAX.
        // Append the partial view to the CSS monitor.
        // PARAMETERS
        // url: URL to retrieve the CSS file content.
        // pathToFormat: Path to the format
        function UpdateCSSMonitor(url, pathData, cssMonitorId) {
            if ($(cssMonitorId).data("enabled") == "True") {
                $.ajax({
                    type: "POST",
                    url: url,
                    data: pathData,
                    dataType: "text",
                    success: function (data) {
                        $(cssMonitorId).html(data);
                        hljs.initHighlighting.called = false;
                        hljs.initHighlighting();
                    },
                    error: function (ex) {
                        UpdateErrorMonitor(ex);
                        console.log(ex);
                    }
                });
            }
        }

        // Summary:
        // On: Clicking the clear CSS monitor button
        // Remove all data from the CSS monitor
        $(".clearCssMonitorButton").click(function () {
            if ($($(this).data("monitor-id")).data("enabled") == "True") {
                $($(this).data("monitor-id")).html("");
            }
        });

        // Summary:
        // Retrieve the JSON content using AJAX.
        // Append the partial view to the JSON monitor.
        // PARAMETERS
        // url: URL to retrieve the JSON file content.
        // pathToFormat: Path to the format
        function UpdateJsonMonitor(url, pathData, jsonMonitorId) {
            if ($(jsonMonitorId).data("enabled") == "True") {
                $.ajax({
                    type: "POST",
                    url: url,
                    data: pathData,
                    dataType: "text",
                    success: function (data) {
                        $(jsonMonitorId).html(data);
                        hljs.initHighlighting.called = false;
                        hljs.initHighlighting();
                    },
                    error: function (ex) {
                        UpdateErrorMonitor(ex);
                        console.log(ex);
                    }
                });
            }
        }

        // Summary:
        // On: Clicking the clear JSON monitor button
        // Remove all data from the JSON monitor
        $(".clearJsonMonitorButton").click(function () {
            if ($($(this).data("monitor-id")).data("enabled") == "True") {
                $($(this).data("monitor-id")).html("");
            }
        });

        // Summary:
        // On: Clicking a toggle monitor button
        // if > The monitor associated with the button is enabled
        //  Disable the monitor associated with the button
        //  Update the clicked toggle button to show the monitor is disabled
        // else > The monitor associated with the button is disabled
        //  Enable the monitor associated with the button
        //  Update the clicked toggle button to show the monitor is enabled
        // if > The monitor associated to the button is the client monitor
        //  Reset the monitor to only show the the Livestream Production Manager
        // else > The monitor associated to the button is not the client monitor
        //  Reset the monitor to completely empty
        $(".toggleMonitorButton").click(function () {
            if ($($(this).data("monitor-id")).data("enabled") == "True") {
                $($(this).data("monitor-id")).data("enabled", "False");
                $(this).removeClass("btn-success").addClass("btn-danger");
                $(this).html("<span class='glyphicon glyphicon-remove' style='font-size: 12px;'></span> Disabled");
                if ($($(this).data("monitor-id")).data("client-monitor") == "True") {
                    $($(this).data("monitor-id")).html("<tr><td>1</td><td>Livestream Production Manager</td><td>Connected</td></tr>");
                    clientsConnectedCount = 1;
                }
                else {
                    $($(this).data("monitor-id")).html("");
                }
            }
            else {
                $($(this).data("monitor-id")).data("enabled", "True");
                $(this).removeClass("btn-danger").addClass("btn-success").html("<span class='glyphicon glyphicon-ok' style='font-size: 12px;'></span> Enabled");
            }
        });

        /* Preview overlay */

        // Summary:
        // On: Clicking the force resize button.
        // Send a force resize command through the WebSocket.
        $(".forceResizeButton").click(function () {
            var jsonData = { "type": "forceResize", data: {} };
            websocket.send(JSON.stringify(jsonData));
        });

        // Summary:
        // On: Clicking a toggle preview overlay button
        // if > The overlay preview associated with the button is enabled
        //  Disable the overlay preview associated with the button
        //  Update the clicked toggle button to show the overlay preview it is disabled
        // else > the overlay preview associated with the button is disabled
        //  Enable the overlay previews associated with the button
        //  Update the clicked toggle button to show the overlay preview it is enabled
        $(".togglePreviewOverlayButton").click(function () {
            if ($($(this).data("preview-id")).data("enabled") == "True") {
                $($(this).data("preview-id")).data("enabled", "False");
                $($(this).data("preview-id")).removeAttr("src");

                if (!$($(this).data("panel-id")).hasClass("previewDisabled")) {
                    $($(this).data("panel-id")).removeClass("previewEnabled").addClass("previewDisabled");
                }

                if (!$($(this).data("preview-id")).hasClass("previewDisabled")) {
                    $($(this).data("preview-id")).removeClass("previewEnabled").addClass("previewDisabled");
                }

                $(this).removeClass("btn-success").addClass("btn-danger").html("<span class='glyphicon glyphicon-remove' style='font-size: 12px;'></span> Disabled");

            } else {
                $($(this).data("preview-id")).data("enabled", "True");

                if ($(this).data("overlay-type") === "Game") {
                    $($(this).data("preview-id")).attr("src", competitorsOverlayPreviewSourceUrl);
                }
                if ($(this).data("overlay-type") === "Commentary") {
                    $($(this).data("preview-id")).attr("src", commentatorsOverlayPreviewSourceUrl);
                }

                if ($($(this).data("panel-id")).hasClass("previewDisabled")) {
                    $($(this).data("panel-id")).addClass("previewEnabled").removeClass("previewDisabled");
                }

                if ($($(this).data("preview-id")).hasClass("previewDisabled")) {
                    $($(this).data("preview-id")).addClass("previewEnabled").removeClass("previewDisabled");
                }

                $(this).removeClass("btn-danger").addClass("btn-success").html("<span class='glyphicon glyphicon-ok' style='font-size: 12px;'></span> Enabled");
            }
        });


        /* Modal */
        // On: Clicking a show ReadMe Modal button
        // only works for competitors at the moment.
        $("#showReadMeModalButton").click(function () {
            if ($("#Format").val()) {
                $.ajax({
                    type: "POST",
                    url: "/FightingGames/GetReadMe",
                    data: { "pathToFormat": $($(this).data("form-id")).find("[name='PathToFormat']").val() },
                    dataType: "html",
                    success: function (data) {
                        $("#readMeModalContent").html(data);
                        $("#readMeModal").modal("show");
                    },
                    error: function (ex) {
                        UpdateErrorMonitor(ex);
                        console.log(ex);
                    }
                });
            } else {
                showSnackbar("#manageCommentatorsSnackbar", "No game and format have been selected.");
            }
        });



        /* Snackbar */

        // Summary:
        // Show a snackbar.
        // PARAMETERS
        // snackbarId: The id attribute of the snackbar to be updated and shown.
        // message: The message to be shown in the snackbar.
        function showSnackbar(snackbarId, message) {
            $(snackbarId).html(message);

            var marginLeft = ($(window).width() - $(snackbarId).outerWidth()) / 2;
            $(snackbarId).css("left", marginLeft >= 0 ? marginLeft : 0);

            $(snackbarId).addClass("show");
            setTimeout(function () {
                $(snackbarId).removeClass("show");
            }, 3000);
        }
    </script>
}