<!DOCTYPE html>

@{ 
    var settingsReader = new LivestreamProductionManager.Implementations.Settings.SettingsReader();
    var defaultTheme = settingsReader.GetSettingValue(Url.Content("~/FightingGames/GeneralSettings.json"), "DefaultTheme");
    var useSmoothTransition = bool.Parse(settingsReader.GetSettingValue(Url.Content("~/FightingGames/GeneralSettings.json"), "UseSmoothTransition"));
}

<html>
    <head>
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>@ViewBag.Title - Livestream Production Manager</title>
        @if (defaultTheme == "Default")
        {
            <link id="bootstrap" href="@Url.Content("~/Content/bootstrap.css")" rel="stylesheet">
            <link id="highlight" href="@Url.Content("~/Content/highlight.css")" rel="stylesheet">
        }
        else if (defaultTheme == "Custom Darkly")
        {
            <link id="bootstrap" href="@Url.Content("~/Content/bootstrap.dark.css")" rel="stylesheet">
            <link id="highlight" href="@Url.Content("~/Content/highlight.dark.css")" rel="stylesheet">
        }
        <link href="@Url.Content("~/Content/site.css")" rel="stylesheet">

        @if (useSmoothTransition)
        {
            <style>
                .changing
                {
                    opacity: 0 !important;
                    transition-duration: 1s;
                    transition-property: opacity;
                }

                .bodyToDefault
                {
                    background-color: #ffffff;
                    transition-duration: 1s;
                    transition-property: background-color;
                }

                .bodyToCustomDarkly {
                    background-color: #000000;
                    transition-duration: 1s;
                    transition-property: background-color;
                }

                .changed
                {
                    transition-duration: 1s;
                    transition-property: opacity;
                }

                .focusOn
                {
                    opacity: 0 !important;
                    transition-duration: 1s;
                    transition-property: opacity;
                }

                .focusOff
                {
                    transition-duration: 1s;
                    transition-property: opacity;
                }
            </style>
        }

        @Scripts.Render("~/bundles/modernizr")
    </head>

    <body>
        <div class="navbar navbar-inverse navbar-fixed-top">
            <div class="container">
                <div class="navbar-header">
                    <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                    </button>
                    @Html.ActionLink("Livestream Production Manager", "Index", "FightingGames", null, new { @class = "navbar-brand" })
                </div>
                <div class="navbar-collapse collapse">
                    <ul class="nav navbar-nav">
                        <li>@Html.ActionLink("Fighting games", "Index", "FightingGames")</li>
                    </ul>

                    <ul class="nav navbar-nav navbar-right">
                        <li class="dropdown">
                            <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">
                                Settings
                                <span class="caret"></span>
                            </a>
                            <ul class="dropdown-menu">
                                <li><a class="cursorPointer" onclick="showGeneralSettingsModal('General Settings', '@Url.Content("~/FightingGames/GeneralSettings.json")')" data-target="#">General</a></li>
                            </ul>
                        </li>

                        <li class="dropdown">
                            <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">
                                Videos
                                <span class="caret"></span>
                            </a>
                            <ul class="dropdown-menu">
                                <li><a class="cursorPointer" onclick="showVideoModal('How to use custom overlays', 'https://www.youtube.com/embed/r9wnR0RkazE')" data-target="#">How to use custom overlays</a></li>
                            </ul>
                        </li>

                        <li class="dropdown">
                            <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">
                                Themes
                                <span class="caret"></span>
                            </a>
                            <ul class="dropdown-menu">
                                <li @(defaultTheme == "Default" ? "class=active" : "")><a class="cursorPointer" onclick="switchTheme(this, '@Url.Content("~/Content/bootstrap.css")', '@Url.Content("~/Content/highlight.css")', 'bodyToDefault')" data-target="#">Default</a></li>
                                <li @(defaultTheme == "Custom Darkly" ? "class=active" : "")><a class="cursorPointer" onclick="switchTheme(this, '@Url.Content("~/Content/bootstrap.dark.css")', '@Url.Content("~/Content/highlight.dark.css")', 'bodyToCustomDarkly')" data-target="#">Custom Darkly</a></li>
                            </ul>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="container-fluid body-content">
            @RenderBody()
            <hr />
            <footer>
                <div class="row">
                    <div class="col-xs-4 text-left">
                        <text class="pull-left">Livestream Production Manager - Made by Gogoku7</text>
                    </div>
                    <div class="col-xs-4 text-center">
                        <text class="text-center">Join the Livestream Production Manager Discord server <a href="https://discord.gg/y83D8Yp" target="_blank">here</a></text>
                    </div>
                    <div class="col-xs-4 text-right">
                        <text class="pull-right">Version 0.5.3 - see <a href="@Url.Action("Version", "About")">version information</a></text>
                    </div>
                </div>
            </footer>
        </div>

        <div class="snackbar" id="manageCompetitorsSnackbar"></div>
        <div class="snackbar" id="manageCommentatorsSnackbar"></div>
        <div class="snackbar" id="managerConnectedSnackbar"></div>
        <div class="snackbar" id="managerFailedToConnectSnackbar"></div>
        <div class="snackbar" id="queuSnackbar"></div>
        <div class="snackbar" id="ajaxErrorSnackbar"></div>
        <div class="snackbar" id="exceptionSnackbar"></div>
        <div class="snackbar" id="clientConnectedSnackbar"></div>
        <div class="snackbar" id="clientDisconnectedSnackbar"></div>
        <div class="snackbar" id="forceResizeSnackbar"></div>
        <div class="snackbar" id="focusSnackbar"></div>

        @Html.Partial("_SettingsModal")
        @Html.Partial("_SkinPickerModal")
        @Html.Partial("_ReadMeModal")
        @Html.Partial("_VideoModal")

        @Scripts.Render("~/bundles/jquery")
        @Scripts.Render("~/bundles/highlight")
        @Scripts.Render("~/bundles/bootstrap")

        @RenderSection("scripts", required: false)
    </body>
</html>


<script type="text/javascript">
    function showGeneralSettingsModal(modalTitle, pathToSettingsFile) {
        try {
            $.ajax({
                type: "POST",
                url: "@Url.Action("GetGeneralSettingsPartialView", "Settings")",
                data: { "pathToSettingsFile": pathToSettingsFile },
                dataType: "html",
                success: function (data) {
                    $("#settingsModalLabel").text(modalTitle);
                    $("#settingsModalBody").html(data);
                    $("#settingsModal").modal("show");
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    ShowSnackbar("#ajaxErrorSnackbar", "An error occurred getting settings. See the log for details");
                    UpdateErrorMonitor(jqXHR.responseText);
                    console.log(jqXHR);
                    console.log(`Text status: ${ textStatus }`);
                    console.log(`Error thrown: ${ errorThrown }`);
                }
            });
        } catch (ex) {
            ShowSnackbar("#exceptionSnackbar", "An unexpected exception occurred, see the console for details.");
            console.log(ex);
            UpdateErrorMonitor(ex.message);
        }
    }

    $("body").on("click", "button[data-settings-form]", function () {
        try {
            $($(this).data("settings-form")).submit();
        } catch (ex) {
            ShowSnackbar("#exceptionSnackbar", "An unexpected exception occurred, see the console for details.");
            console.log(ex);
            UpdateErrorMonitor(ex.message);
        }
    });

    function showVideoModal(modalTitle, videoUrl) {
        try {
            $("#videoModalLabel").html(modalTitle);
            $("#videoModalBody").html("<iframe width='560' height='315' src='" + videoUrl + "' frameborder='0' allow='accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture' allowfullscreen></iframe>");
            $("#videoModal").modal("show");
        } catch (ex) {
            ShowSnackbar("#exceptionSnackbar", "An unexpected exception occurred, see the console for details.");
            console.log(ex);
            UpdateErrorMonitor(ex.message);
        }
    }

    function switchTheme(element, bootstrapFileUrl, highlightFileUrl, transitionClass) {
        try {
            if (!$(element).parent().hasClass("active")) {
                @if (useSmoothTransition)
                {
                    <text>
                        $("body").addClass(transitionClass);
                        $(".body-content").addClass("changing");
                        $(".navbar").addClass("changing");

                        setTimeout(function () {
                            $("#highlight").attr("href", highlightFileUrl);
                            $("#bootstrap").attr("href", bootstrapFileUrl);

                            $(".dropdown-menu > li.active").removeClass("active");
                            $(element).parent().addClass("active");

                            setTimeout(function () {
                                $("body").removeClass(transitionClass);
                                $(".body-content").removeClass("changing").addClass("changed");
                                $(".navbar").removeClass("changing").addClass("changed");
                                setTimeout(function () {
                                    $(".body-content").removeClass("changed");
                                    $(".navbar").removeClass("changed");
                                }, 1000);
                            }, 1000);
                        }, 1000);
                    </text>
                }
                else
                {
                    <text>
                        $("#highlight").attr("href", highlightFileUrl);
                        $("#bootstrap").attr("href", bootstrapFileUrl);
                        $(".dropdown-menu > li.active").removeClass("active");
                        $(element).parent().addClass("active");
                    </text>
                }
            }
        } catch (ex) {
            ShowSnackbar("#exceptionSnackbar", "An unexpected exception occurred, see the console for details.");
            console.log(ex);
            UpdateErrorMonitor(ex.message);
        }
    }
</script>